.TH "main" 3 "MECHA-12 Romi" \" -*- nroff -*-
.ad l
.nh
.SH NAME
main
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBmotor\fP (shares)"
.br
.ti -1c
.RI "\fBsensor\fP (shares)"
.br
.ti -1c
.RI "\fBuser\fP (shares)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBuart\fP = pyb\&.UART(3, 115200)"
.br
.RI "For USB Connection nb_in = \fBNB_Input\fP (USB_VCP (), echo=True) "
.ti -1c
.RI "\fBnb_in\fP = \fBNB_Input\fP (\fBuart\fP, echo=True)"
.br
.ti -1c
.RI "\fBtim4\fP = Timer(4, freq=500)"
.br
.ti -1c
.RI "\fBLeft_Motor\fP = \fBdriver\fP(Pin\&.cpu\&.B7, Pin\&.cpu\&.H0, Pin\&.cpu\&.H1, \fBtim4\fP, 2)"
.br
.ti -1c
.RI "\fBRight_Motor\fP = \fBdriver\fP(Pin\&.cpu\&.B6, Pin\&.cpu\&.B2, Pin\&.cpu\&.A9, \fBtim4\fP, 1)"
.br
.ti -1c
.RI "\fBLeft_Encoder\fP = \fBEncoder\fP(3, Pin\&.cpu\&.A7, Pin\&.cpu\&.A6)"
.br
.ti -1c
.RI "\fBRight_Encoder\fP = \fBEncoder\fP(2, Pin\&.cpu\&.A1, Pin\&.cpu\&.A0)"
.br
.ti -1c
.RI "\fBline_sensor\fP"
.br
.ti -1c
.RI "\fBLBump0\fP = pyb\&.Pin(Pin\&.cpu\&.B4, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"
.br
.ti -1c
.RI "\fBLBump1\fP = pyb\&.Pin(Pin\&.cpu\&.B5, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"
.br
.ti -1c
.RI "\fBLBump2\fP = pyb\&.Pin(Pin\&.cpu\&.B3, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"
.br
.ti -1c
.RI "\fBRBump5\fP = pyb\&.Pin(Pin\&.cpu\&.C9, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"
.br
.ti -1c
.RI "\fBRBump4\fP = pyb\&.Pin(Pin\&.cpu\&.B8, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"
.br
.ti -1c
.RI "\fBRBump3\fP = pyb\&.Pin(Pin\&.cpu\&.B9, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"
.br
.ti -1c
.RI "\fBLine_PID\fP = \fBPID\fP(0\&.1, 0\&.02, 0\&.1, 0\&.02, 0\&.01, 0\&.008)"
.br
.ti -1c
.RI "\fBi2c\fP = I2C(2)"
.br
.ti -1c
.RI "\fBCONTROLLER\fP"
.br
.ti -1c
.RI "\fBbaudrate\fP"
.br
.ti -1c
.RI "\fBimu\fP = \fBIMU\fP(\fBi2c\fP)"
.br
.ti -1c
.RI "\fByaw_init\fP = imu\&.read_Euler()"
.br
.ti -1c
.RI "\fBLpos\fP"
.br
.ti -1c
.RI "\fBRpos\fP"
.br
.ti -1c
.RI "\fBLtime\fP"
.br
.ti -1c
.RI "\fBRtime\fP"
.br
.ti -1c
.RI "\fBheading\fP"
.br
.ti -1c
.RI "\fBLeffort\fP"
.br
.RI "Shared Variables Stores user_in motor effort\&. "
.ti -1c
.RI "\fBReffort\fP"
.br
.ti -1c
.RI "\fBtask1\fP"
.br
.RI "Scheduler tasks\&. "
.ti -1c
.RI "\fBtask2\fP"
.br
.ti -1c
.RI "\fBtask3\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
.nf
MECHA 12
edited: 3/10/2025
SCHEDULER FOR ROMI

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "main\&.motor ( shares)"

.SS "main\&.sensor ( shares)"

.SS "main\&.user ( shares)"

.SH "Variable Documentation"
.PP 
.SS "main\&.baudrate"

.SS "main\&.CONTROLLER"

.SS "main\&.heading"
\fBInitial value:\fP
.nf
1 =  task_share\&.Queue('I', 16, thread_protect=False,
2                                 name = "Heading Angle")
.PP
.fi

.SS "main\&.i2c = I2C(2)"

.SS "main\&.imu = \fBIMU\fP(\fBi2c\fP)"

.SS "main\&.LBump0 = pyb\&.Pin(Pin\&.cpu\&.B4, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"

.SS "main\&.LBump1 = pyb\&.Pin(Pin\&.cpu\&.B5, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"

.SS "main\&.LBump2 = pyb\&.Pin(Pin\&.cpu\&.B3, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"

.SS "main\&.Leffort"
\fBInitial value:\fP
.nf
1 =  task_share\&.Share('f', thread_protect=False,
2                                 name="Left Motor Effort")
.PP
.fi

.PP
Shared Variables Stores user_in motor effort\&. 
.SS "main\&.Left_Encoder = \fBEncoder\fP(3, Pin\&.cpu\&.A7, Pin\&.cpu\&.A6)"

.SS "main\&.Left_Motor = \fBdriver\fP(Pin\&.cpu\&.B7, Pin\&.cpu\&.H0, Pin\&.cpu\&.H1, \fBtim4\fP, 2)"

.SS "main\&.Line_PID = \fBPID\fP(0\&.1, 0\&.02, 0\&.1, 0\&.02, 0\&.01, 0\&.008)"

.SS "main\&.line_sensor"
\fBInitial value:\fP
.nf
1 =  Line_Sensor(Pin\&.cpu\&.C8, Pin\&.cpu\&.C2, Pin\&.cpu\&.C3, 
2                               Pin\&.cpu\&.A4, Pin\&.cpu\&.B0, Pin\&.cpu\&.C1, 
3                               Pin\&.cpu\&.C0, Pin\&.cpu\&.B1)
.PP
.fi

.SS "main\&.Lpos"
\fBInitial value:\fP
.nf
1 =  task_share\&.Queue('f', 16, thread_protect=False,
2                               name= "Left Position")
.PP
.fi

.SS "main\&.Ltime"
\fBInitial value:\fP
.nf
1 =  task_share\&.Queue('I', 16, thread_protect=False,
2                               name = "Left Elapsed Time")
.PP
.fi

.SS "main\&.nb_in = \fBNB_Input\fP (\fBuart\fP, echo=True)"

.SS "main\&.RBump3 = pyb\&.Pin(Pin\&.cpu\&.B9, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"

.SS "main\&.RBump4 = pyb\&.Pin(Pin\&.cpu\&.B8, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"

.SS "main\&.RBump5 = pyb\&.Pin(Pin\&.cpu\&.C9, pyb\&.Pin\&.IN, pull=pyb\&.Pin\&.PULL_UP)"

.SS "main\&.Reffort"
\fBInitial value:\fP
.nf
1 =  task_share\&.Share('f', thread_protect=False,
2                                 name="Right Motor Effort")
.PP
.fi

.SS "main\&.Right_Encoder = \fBEncoder\fP(2, Pin\&.cpu\&.A1, Pin\&.cpu\&.A0)"

.SS "main\&.Right_Motor = \fBdriver\fP(Pin\&.cpu\&.B6, Pin\&.cpu\&.B2, Pin\&.cpu\&.A9, \fBtim4\fP, 1)"

.SS "main\&.Rpos"
\fBInitial value:\fP
.nf
1 =  task_share\&.Queue('f', 16, thread_protect=False,
2                               name= "Right Position")
.PP
.fi

.SS "main\&.Rtime"
\fBInitial value:\fP
.nf
1 =  task_share\&.Queue('I', 16, thread_protect=False,
2                               name = "Right Elapsed Time")
.PP
.fi

.SS "main\&.task1"
\fBInitial value:\fP
.nf
1 =  cotask\&.Task(user, name="Task_1", priority=0, period=1,
2                         profile=True, trace=False, shares=(Leffort, Reffort))
.PP
.fi

.PP
Scheduler tasks\&. 
.SS "main\&.task2"
\fBInitial value:\fP
.nf
1 =  cotask\&.Task(motor, name="Task_2", priority=2, period=10,
2                         profile=True, trace=False, shares=(Leffort, Reffort))
.PP
.fi

.SS "main\&.task3"
\fBInitial value:\fP
.nf
1 =  cotask\&.Task(sensor, name="Task_3", priority=2, period=10,
2                         profile=True, trace=False, shares=(Leffort, Reffort, heading))
.PP
.fi

.SS "main\&.tim4 = Timer(4, freq=500)"

.SS "main\&.uart = pyb\&.UART(3, 115200)"

.PP
For USB Connection nb_in = \fBNB_Input\fP (USB_VCP (), echo=True) For Bluetooth Connection 
.SS "main\&.yaw_init = imu\&.read_Euler()"

.SH "Author"
.PP 
Generated automatically by Doxygen for MECHA-12 Romi from the source code\&.
